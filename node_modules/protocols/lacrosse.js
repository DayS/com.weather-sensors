"use strict";

/*
Copyright (c) 2019 Ram√≥n Baas

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/*
  LaCrosse weather sensor protocol

  See http://www.f6fbb.org/domo/sensors/tx3_th.php
*/

const utils = require('utils');

class LaCrosseTX extends utils.WeatherSignal {

	constructor() {
    super({
			id: 'lacrosse1',
			name: 'La Crosse TX2/3',
			signal: 'LaCrosseTX3',
			hint: {
				en: 'Supports La Crosse TX2/TX3 weather sensors; this protocol is also used by some other brands like TFA',
				nl: 'Ondersteunt La Crosse TX2/TX3 sensoren; het protocol wordt ook door andere merken gebruikt (bv TFA)'
			}
		})
	}

	// Parse the data according to the LaCrosse protocol
	parse(payLoad) {
		let result = 'Not a valid LaCrosse message';
		let decVal = payLoad.join('');
		let len = payLoad.length;
		let checks = this.calcParityCRC('00001010' + decVal);
		let check_par = Number(utils.bin2dec(decVal[11]));
		let check_crc = Number(utils.bin2dec(decVal.slice(len - 4, len)));
		if (checks.par == check_par) {
			if (checks.crc === check_crc) {
				result = this.decode(decVal);
			} else {
				result = new Error('CRC error for LaCrosse (' + checks.crc + ' vs ' + check_crc + ')');
			}
		} else {
			result = new Error('Parity error for LaCrosse (' + checks.par + ' vs ' + check_par + ')');
		}
		return result;
	}

	// Calculate parity and CRC (TX2/TX3)
	calcParityCRC(data) {
		let crc = 0;
		let par = 0;
		for (let i = 0; i < (data.length >> 2) - 1; i++) {
			let val = Number(utils.bin2dec(data.slice(i * 4, (i + 1) * 4)));
			crc += val;
			if (i > 4 && i < 8) {
				par += (val & 0x1) + ((val >> 1) & 0x1)	+ ((val >> 2) & 0x1) + (val >> 3);
			}
		}
		return { par: par & 0x1, crc: crc & 0xf }
	}

	// Decode the received data
	decode(data) {
		let id = utils.bin2dec(data.slice(4, 11));
		let typeNr = Number(utils.bin2dec(data.slice(0, 4)));
		let result = {
			id: id,
			data: {}
		}
		// Decode the data based on the type
		let value = utils.bin2dec(data.slice(12, 16)) + utils.bin2dec(data.slice(16, 20)) + '.' + utils.bin2dec(data.slice(20, 24));
		if (typeNr === 0) { // Thermo
			result.data.temperature = Number((value - 50.0).toFixed(1));
		} else if (typeNr === 0xe) { // Hygro
			result.data.humidity = Number(value);
		} else {
			result = new Error('Unknown type ' + typeNr);
		}

		return result;
	}

}


class LaCrosseWS extends utils.WeatherSignal {

	constructor() {
    super({
			id: 'lacrosse2',
			name: 'La Crosse WS',
			signal: 'LaCrosseWS',
			hint: {
				en: 'Supports La Crosse WS2500/WS7000 series',
				nl: 'Ondersteunt La Crosse WS2500/WS7000 sensoren'
			}
		})
	}

	// Parse the data according to the LaCrosse WS7000 protocol
	parse(payLoad) {
		const lenV3 = {
			36: true, // R or T
			51: true, // W or TH
			56: true, // L
			71: true  // THB
		}
		let result;
		let len = payLoad.length;
		let valid = lenV3[len];
		if (valid) {
			let checks = this.calcParityCRC(payLoad);
			let check_crc = Number(utils.bin2dec((payLoad.slice(len - 5, len - 1)).reverse().join('')));
			if (checks.par === 0 && checks.valid) {
				if (checks.crc === check_crc) {
					result = this.decode(checks.data);
				} else {
					result = new Error('CRC error for LaCrosse (' + checks.crc + ' vs ' + check_crc + ')');
				}
			} else {
				result = new Error('Validity error for LaCrosse (' + checks.valid + ' and ' + checks.par + ')');
			}
		} else {
			result = new Error('Not a known message type of length ' + len);
		}
		return result;
	}

	// Calculate parity and CRC (WS7000)
	calcParityCRC(data) {
		let crc = 5;
		let par = 0;
		let decVal = [];
		let valid = true;
		for (let i = 0; i < data.length - 6; i += 5) {
			valid = valid || (data[i] === 1);
			let val = Number(utils.bin2dec((data.slice(1 + i, 5 + i)).reverse().join('')));
			decVal.push(val);
			crc += val;
			par ^= val;
		}
		return { par: par, crc: crc & 0xf, valid: valid, data: decVal }
	}

	// Decode the received data
	decode(data) {
		let stype = data[0];
		let id = data[1].toString();
		let result = {
			id: id,
			data: {}
		}

		if (stype === 0 || stype === 1 || stype === 4) {
			let sign = (id & 0x8) > 0 ? -1 : 1;
			result.id = (result.id & 0x7).toString();
			result.data.temperature = sign * (data[4] * 10 + data[3] + data[2] * 0.1);
			if (stype > 0) {
				result.data.humidity = data[7] * 10 + data[6] + data[5] * 0.1;
			}
			if (stype === 4) {
				result.data.pressure = 200 + data[10] * 100 + data[9] * 10 + data[8];
			}
		} else if (stype === 2) {
			result.data = {
				raintotal: data[4] * 256 + data[3] * 16 + data[2]
			}
		} else if (stype === 3) {
			result.data = {
				currentspeed: data[4] * 10 + data[3] + 0.1 * data[2], // km/h
				direction: (data[7] >> 2) * 100 + data[6] * 10 + data[5]
			}
		} else if (stype === 5) {
			result.data = {
				brightness: (data[4] * 100 + data[3] * 10 + data[2]) * Math.pow(10, data[5]), // lux
				duration: data[8] * 256 + data[7] * 16 + data[6] // minutes
			}
		}

		return result;
	}

}


module.exports = {
	lacrosse1: LaCrosseTX,
	lacrosse2: LaCrosseWS
}
