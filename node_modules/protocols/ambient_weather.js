"use strict";


const utils = require('utils');

/**
 * Useful resources :
 * - https://github.com/flipperdevices/flipperzero-good-faps/blob/dev/weather_station/protocols/ambient_weather.c
 * - https://github.com/merbanan/rtl_433/blob/master/src/devices/ambient_weather.c
 * - https://www.osengr.org/WxShield/Downloads/Weather-Sensor-RF-Protocols.pdf
 * - https://eclecticmusingsofachaoticmind.wordpress.com/2015/01/21/home-automation-temperature-sensors/
 */
class AmbientWeather extends utils.WeatherSignal {

    constructor() {
        super({
            id: 'ambient_weather',
            name: 'Ambient Weather',
            signal: 'AmbientWeather',
            hint: {
                en: 'Support for Ambient Weather F007TH, Ambient Weather F012TH, TFA senders 30.3208.02, SwitchDoc Labs F016TH, OneConcept'
            }
        })
    }

    // Parse the data according to the TFA protocol
    parse(payLoad) {
        const str = payLoad.join('');

        if (utils.bin2hex(str.slice(0, 8)) === '45') {
            const hash = Number(utils.bin2dec(str.slice(40, 48)));
            const crc = this.lfsr_digest8(str.slice(0, 40), 0x98, 0x3e) ^ 0x64

            if (hash === crc) {
                return this.decode(str);
            } else {
                return new Error('CRC mismatch');
            }
        } else {
            return new Error('Wrong preffix');
        }
    }

    // Decode the data
    /*
        Byte 0   Byte 1   Byte 2   Byte 3   Byte 4   Byte 5
        xxxxMMMM IIIIIIII BCCCTTTT TTTTTTTT HHHHHHHH MMMMMMMM
        - x: Unknown 0x04 on F007TH/F012TH
        - M: Model Number?, 0x05 on F007TH/F012TH/SwitchDocLabs F016TH
        - I: ID byte (8 bits), volatie, changes at power up,
        - B: Battery Low
        - C: Channel (3 bits 1-8) - F007TH set by Dip switch, F012TH soft setting
        - T: Temperature 12 bits - Fahrenheit * 10 + 400
        - H: Humidity (8 bits)
        - M: Message integrity check LFSR Digest-8, gen 0x98, key 0x3e, init 0x64
    */
    decode(data) {
        let id = utils.bin2hex(data.slice(8, 16));
        let channel = Number(utils.bin2dec(data.slice(17, 20))) + 1;

        let temp = utils.bin2dec(data.slice(20, 32));
        temp = temp * 0.1 - 40
        temp = (temp - 32) * 5 / 9

        let humidity = Number(utils.bin2dec(data.slice(32, 40)));

        return {
            id: id,
            channel: channel,
            data: { temperature: Number(temp), humidity: humidity, lowbattery: data[16] === '1' }
        };
    }

    lfsr_digest8(message, gen, key) {
        let sum = 0;
        for (let i = 0; i < message.length; i++) {
            if (message[i] === '1')
                sum ^= key;

            if (key & 1)
                key = (key >> 1) ^ gen;
            else
                key = (key >> 1);
        }
        return sum;
    }
}


module.exports = {
    AmbientWeather: AmbientWeather
};
